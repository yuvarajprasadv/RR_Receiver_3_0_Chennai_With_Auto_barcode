var eachOrder = "0"var counter = 0;var doc = app.activeDocument;main(arguments);function getVisible(txObj){    var result=0;    for (var i=0;i<txObj.lines.length;i++)    {        result += txObj.lines[i].characters.length;    }    return result;} function getChars(txObj){    var result=0;      //  $.writeln(txObj.paragraphs.length);    txObj.selected = true;    for (var i=0;i<txObj.paragraphs.length;i++)    {        try        {            result += txObj.paragraphs[i].characters.length;        }        catch(err)        {          //  $.writeln(txObj.name + err.message);            $.sleep (10000);         }    }    return result;}function scalingWidth(txObj, wscl, orderSeq, fntIter, leadIter, hIter, vIter){ for (var i=0;i<txObj.paragraphs.length;i++)    {     //   txObj.paragraphs[i].scaling = wscl;     //txObj.textRange.characterAttributes.size -= 0.5;         switch (orderSeq)         {               case "4":              {	              //$.writeln(txObj.paragraphs[i].characterAttributes.tracking );	              txObj.paragraphs[i].characterAttributes.verticalScale -= vIter;	              redraw();              }              case "1":              {                    txObj.paragraphs[i].characterAttributes.size -= fntIter;                    redraw();              }              case "3":              {               //   $.writeln(txObj.paragraphs[i].characterAttributes.tracking );	              txObj.paragraphs[i].characterAttributes.horizontalScale -= hIter;	              // txObj.paragraphs[i].desiredWordSpacing = 0.5;	              redraw();              }              case "2":              {                    txObj.paragraphs[i].characterAttributes.leading  -= leadIter;                    redraw();              }               }    }}  function getCharacters(eachTextFrame, eachOrder, fntIter, leadIter, hIter, vIter){    var ordSeq = 0;    slct =eachTextFrame;        visibleChar =getVisible(slct);    cntsLength = getChars(slct);    var vscale = 1.0;    stepNum = 0.02;     while (cntsLength != visibleChar) {     //   $.writeln("order " + ordSeq);        if (ordSeq == 4)        {            ordSeq = 0;        }        scalingWidth(slct, [vscale, 1], eachOrder[ordSeq++], fntIter, leadIter, hIter, vIter);                visibleChar =getVisible(slct);        vscale = vscale-stepNum;        } }function ApplyStyleInOrder(eachTextFrame, eachOrder, fntIter, leadIter, hIter, vIter){	    if (eachTextFrame.kind == TextType.AREATEXT)	    {            eachTextFrame.selected = true;	        getCharacters(eachTextFrame, eachOrder, fntIter, leadIter, hIter, vIter);	    }        eachTextFrame.selected = false;}function GetAttributes(arrAttr){	var attrItems  = new Array;	var k =0;	for ( i=0; i<arrAttr.length; i++)	{	  	    var subArr =  (arrAttr[i].split(":"));	    for (j=0; j<subArr.length;j++)	    {	        attrItems[k] = subArr[j];	        k++	    }	  }	  return attrItems;}function GetAttributeValue(attrItems, attrName){  for ( i=0; i<attrItems.length; i++)    {         if(attrItems[i]== attrName)         {               return attrItems[i+1];         }              }}function main(arg){        if(arg[0]=="0")        {             if ( app.documents.length > 0 )             {                doc = app.activeDocument;                paragraphCount = 0;                var artItem = doc.textFrames;                var artItemArr = new Array;                var artInc = 0;                for ( i =0; i <artItem.length; i++ )                 {					if(artItem[i].name.split ("::", 1)  == "Typhoon Plug-In Object" )					{						artItemArr[artInc] = artItem[i].name + "~" + i;						artInc++;					}                }                return (artItemArr);             }        }         else if (arg[0]=="1")        {            var elmAttr = new Array;            elmAttr = arg[2];            var arrAttr =  (elmAttr.split(","));            if ( elmAttr != "null" )             {            	var attValues = GetAttributes(arrAttr);            	eachOrder = (GetAttributeValue(attValues, 'TextFit')).split("~");            	var fntIter = 0.0;				var leadIter = 0.0;				var hIter = 0.0;				var vIter = 0.0;								fntIter = parseFloat(GetAttributeValue(attValues, 'SizeIteration'));				leadIter = parseFloat(GetAttributeValue(attValues, 'LeadingIteration'));				hIter = parseFloat(GetAttributeValue(attValues, 'HorizontalScale'));				vIter = parseFloat(GetAttributeValue(attValues, 'verticalScale'));				            	//$.writeln(fntIter);                doc = app.activeDocument;                var artItem = doc.textFrames;                var artItemArr = new Array;                var artInc = 0;                var index = (arg[3].split("~"));                                $.writeln("   "+ arg[3] + "  " + artItem[index[2]].name +"   "+ index[1]);                if (artItem[index[1]].name == index[0])                {                 //   	$.writeln("elementAttr : " + elmAttr + " , indx " + index[0] );                 	textArtRange = artItem[index[1]];					ApplyStyleInOrder(textArtRange, eachOrder, fntIter, leadIter, hIter, vIter);                }                return "True";             }             else            {                return "False";            }      }}