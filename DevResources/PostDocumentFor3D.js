main(arguments);var errString = "";function main(argv){   app.userInteractionLevel = UserInteractionLevel.DONTDISPLAYALERTS;try	{        sourceDoc = app.activeDocument;        SaveDocAsPDF(sourceDoc, argv[2]);          ExportDocumentAsJPEG(sourceDoc, argv[2]);      //   SaveSourceDoc(sourceDoc, argv[1]);			// not required for 3D file.     }     catch(e)     {     	errString = "Error on post document 3d : " + e.description;     }     return errString;  }function SaveDocAsPDF (sourceDoc, pdfTargetPath){	try	{	    if ( app.documents.length > 0 ) 	    {	        var pdfFileName = new File ( pdfTargetPath );	        savePdfOpts = new PDFSaveOptions();	        savePdfOpts.optimization = true;	        savePdfOpts.preserveEditablility = false;	        savePdfOpts.compatibility = PDFCompatibility.ACROBAT5;	        sourceDoc.saveAs( pdfFileName, savePdfOpts );	    }     }	 catch(e)	 {	 	errString = "Error on post document 3d pdf : " + e.description;	 }}function SaveSourceDoc(docSource, docTargetPath){	try	{	    if ( app.documents.length > 0 ) 	    {	        var docFileName = new File ( docTargetPath );	        var saveOpts = new IllustratorSaveOptions();	    		saveOpts.embedLinkedFiles = false;	    		saveOpts.fontSubsetThreshold = 0.0;	   	 	saveOpts.pdfCompatible = true;	        docSource.saveAs(docFileName, saveOpts);	    }    }     catch(e)     {     	errString = "Error on post document 3d save doc : " + e.description;     }}function ExportDocumentAsJPEG(docSource, docTargetPath){	try	{		if(app.documents.length > 0)		{			var docFileSpec = new File ( docTargetPath );			var exportOptions = new ExportOptionsJPEG();			var type = ExportType.JPEG;			exportOptions.antiAliasing = false;			exportOptions.qualitysetting = 35;			exportOptions.optimization = true;			exportOptions.artBoardClipping = false;			docSource.exportFile(docFileSpec, type, exportOptions);					}	 }     catch(e)     {     	errString = "Error on post document 3d save jpeg : " + e.description;     }}